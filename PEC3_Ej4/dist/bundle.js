(()=>{"use strict";var t,n,e,o,r,i,s,a,d,c,p,u,l,A,f,h,m,b,E,x,g={426:(t,n,e)=>{e.d(n,{Z:()=>a});var o=e(537),r=e.n(o),i=e(645),s=e.n(i)()(r());s.push([t.id,'*,\n*::before,\n*::after {\n  box-sizing: border-box\n}\n\nhtml {\n  font-family: sans-serif;\n  font-size: 1rem;\n  color: #444;\n}\n\n#root {\n  max-width: 450px;\n  margin: 2rem auto;\n  padding: 0 1rem;\n}\n\nform {\n  display: flex;\n  margin-bottom: 2rem;\n}\n\n[type="text"],\nbutton {\n  display: inline-block;\n  -webkit-appearance: none;\n  padding: .5rem 1rem;\n  font-size: 1rem;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n}\n\nbutton {\n  cursor: pointer;\n  background: #007bff;\n  color: white;\n  border: 2px solid #007bff;\n  margin: 0 .5rem;\n}\n\n[type="text"] {\n  width: 100%;\n}\n\n[type="text"]:active,\n[type="text"]:focus {\n  outline: 0;\n  border: 2px solid #007bff;\n}\n\n[type="checkbox"] {\n  margin-right: 1rem;\n  font-size: 2rem;\n}\n\nh1 {\n  color: #222;\n}\n\nul {\n  padding: 0;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  background: #f4f4f4;\n  border-radius: 4px;\n}\n\nli span {\n  display: inline-block;\n  padding: .5rem;\n  width: 250px;\n  border-radius: 4px;\n  border: 2px solid transparent;\n}\n\nli span:hover {\n  background: rgba(179, 215, 255, 0.52);\n}\n\nli span:focus {\n  outline: 0;\n  border: 2px solid #007bff;\n  background: rgba(179, 207, 255, 0.52)\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;EAGE;AACF;;AAEA;EACE,uBAAuB;EACvB,eAAe;EACf,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;;EAEE,qBAAqB;EACrB,wBAAwB;EACxB,mBAAmB;EACnB,eAAe;EACf,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,UAAU;EACV,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,cAAc;EACd,YAAY;EACZ,kBAAkB;EAClB,6BAA6B;AAC/B;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,UAAU;EACV,yBAAyB;EACzB;AACF",sourcesContent:['*,\n*::before,\n*::after {\n  box-sizing: border-box\n}\n\nhtml {\n  font-family: sans-serif;\n  font-size: 1rem;\n  color: #444;\n}\n\n#root {\n  max-width: 450px;\n  margin: 2rem auto;\n  padding: 0 1rem;\n}\n\nform {\n  display: flex;\n  margin-bottom: 2rem;\n}\n\n[type="text"],\nbutton {\n  display: inline-block;\n  -webkit-appearance: none;\n  padding: .5rem 1rem;\n  font-size: 1rem;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n}\n\nbutton {\n  cursor: pointer;\n  background: #007bff;\n  color: white;\n  border: 2px solid #007bff;\n  margin: 0 .5rem;\n}\n\n[type="text"] {\n  width: 100%;\n}\n\n[type="text"]:active,\n[type="text"]:focus {\n  outline: 0;\n  border: 2px solid #007bff;\n}\n\n[type="checkbox"] {\n  margin-right: 1rem;\n  font-size: 2rem;\n}\n\nh1 {\n  color: #222;\n}\n\nul {\n  padding: 0;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  background: #f4f4f4;\n  border-radius: 4px;\n}\n\nli span {\n  display: inline-block;\n  padding: .5rem;\n  width: 250px;\n  border-radius: 4px;\n  border: 2px solid transparent;\n}\n\nli span:hover {\n  background: rgba(179, 215, 255, 0.52);\n}\n\nli span:focus {\n  outline: 0;\n  border: 2px solid #007bff;\n  background: rgba(179, 207, 255, 0.52)\n}'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(s[d]=!0)}for(var c=0;c<t.length;c++){var p=[].concat(t[c]);o&&s[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),n.push(p))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),s=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(s).concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var i={},s=[],a=0;a<t.length;a++){var d=t[a],c=o.base?d[0]+o.base:d[0],p=i[c]||0,u="".concat(c," ").concat(p);i[c]=p+1;var l=e(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==l)n[l].references++,n[l].updater(A);else{var f=r(A,o);o.byIndex=a,n.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=e(i[s]);n[a].references--}for(var d=o(t,r),c=0;c<i.length;c++){var p=e(i[c]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=d}}},569:t=>{var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},y={};function v(t){var n=y[t];if(void 0!==n)return n.exports;var e=y[t]={id:t,exports:{}};return g[t](e,e.exports,v),e.exports}v.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return v.d(n,{a:n}),n},v.d=(t,n)=>{for(var e in n)v.o(n,e)&&!v.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},v.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)},n=function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)},function(t){function e(){return null!==t&&t.apply(this,arguments)||this}n(e,t),e.prototype.filter=function(t){throw new Error("Method not implemented.")},e.prototype.map=function(t){throw new Error("Method not implemented.")},e.prototype.push=function(t){throw new Error("Method not implemented.")}}(e=function(t,n){void 0===n&&(n=!1),this.id="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"==t?n:3&n|8).toString(16)})),this.text=t,this.complete=n}),o=function(){return o=Object.assign||function(t){for(var n,e=1,o=arguments.length;e<o;e++)for(var r in n=arguments[e])Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r]);return t},o.apply(this,arguments)},r=function(){function t(){this.todos=(JSON.parse(localStorage.getItem("todos"))||[]).map((function(t){return new e(t)}))}return t.prototype.bindTodoListChanged=function(t){this.onTodoListChanged=t},t.prototype._commit=function(t){this.onTodoListChanged(t),localStorage.setItem("todos",JSON.stringify(t))},t.prototype.addTodo=function(t){this.todos.push(new e(t)),this._commit(this.todos)},t.prototype.editTodo=function(t,n){this.todos=this.todos.map((function(r){return r.id===t?new e(o(o({},r),{text:n})):r})),this._commit(this.todos)},t.prototype.deleteTodo=function(t){this.todos=this.todos.filter((function(n){return n.id!==t})),this._commit(this.todos)},t.prototype.toggleTodo=function(t){this.todos=this.todos.map((function(n){return n.id===t?new e(o(o({},n),{complete:!n.complete})):n})),this._commit(this.todos)},t}(),i=function(){function t(){this.app=this.getElement("#root"),this.form=this.createElement("form"),this.input=this.createElement("input"),this.input.type="text",this.input.placeholder="Add todo",this.input.name="todo",this.submitButton=this.createElement("button"),this.submitButton.textContent="Submit",this.form.append(this.input,this.submitButton),this.title=this.createElement("h1"),this.title.textContent="Todos",this.todoList=this.createElement("ul","todo-list"),this.app.append(this.title,this.form,this.todoList),this._temporaryTodoText="",this._initLocalListeners()}return Object.defineProperty(t.prototype,"_todoText",{get:function(){return this.input.value},enumerable:!1,configurable:!0}),t.prototype._resetInput=function(){this.input.value=""},t.prototype.createElement=function(t,n){var e=document.createElement(t);return n&&e.classList.add(n),e},t.prototype.getElement=function(t){return document.querySelector(t)},t.prototype.displayTodos=function(t){for(var n=this;this.todoList.firstChild;)this.todoList.removeChild(this.todoList.firstChild);if(0===t.length){var e=this.createElement("p");e.textContent="Nothing to do! Add a task?",this.todoList.append(e)}else t.forEach((function(t){var e=n.createElement("li");e.id=t.id;var o=n.createElement("input");o.type="checkbox",o.checked=t.complete;var r=n.createElement("span");if(r.contentEditable=!0,r.classList.add("editable"),t.complete){var i=n.createElement("s");i.textContent=t.text,r.append(i)}else r.textContent=t.text;var s=n.createElement("button","delete");s.textContent="Delete",e.append(o,r,s),n.todoList.append(e)}));console.log(t)},t.prototype._initLocalListeners=function(){var t=this;this.todoList.addEventListener("input",(function(n){"editable"===n.target.className&&(t._temporaryTodoText=n.target.innerText)}))},t.prototype.bindAddTodo=function(t){var n=this;this.form.addEventListener("submit",(function(e){e.preventDefault(),n._todoText&&(t(n._todoText),n._resetInput())}))},t.prototype.bindDeleteTodo=function(t){this.todoList.addEventListener("click",(function(n){if("delete"===n.target.className){var e=n.target.parentElement.id;t(e)}}))},t.prototype.bindEditTodo=function(t){var n=this;this.todoList.addEventListener("focusout",(function(e){if(n._temporaryTodoText){var o=e.target.parentElement.id;t(o,n._temporaryTodoText),n._temporaryTodoText=""}}))},t.prototype.bindToggleTodo=function(t){this.todoList.addEventListener("change",(function(n){if("checkbox"===n.target.type){var e=n.target.parentElement.id;t(e)}}))},t}(),s=v(379),a=v.n(s),d=v(795),c=v.n(d),p=v(569),u=v.n(p),l=v(565),A=v.n(l),f=v(216),h=v.n(f),m=v(589),b=v.n(m),E=v(426),(x={}).styleTagTransform=b(),x.setAttributes=A(),x.insert=u().bind(null,"head"),x.domAPI=c(),x.insertStyleElement=h(),a()(E.Z,x),E.Z&&E.Z.locals&&E.Z.locals,new function(t,n){var e=this;this.onTodoListChanged=function(t){e.view.displayTodos(t)},this.handleAddTodo=function(t){e.service.addTodo(t)},this.handleEditTodo=function(t,n){e.service.editTodo(t,n)},this.handleDeleteTodo=function(t){e.service.deleteTodo(t)},this.handleToggleTodo=function(t){e.service.toggleTodo(t)},this.service=t,this.view=n,this.service.bindTodoListChanged(this.onTodoListChanged),this.view.bindAddTodo(this.handleAddTodo),this.view.bindEditTodo(this.handleEditTodo),this.view.bindDeleteTodo(this.handleDeleteTodo),this.view.bindToggleTodo(this.handleToggleTodo),this.onTodoListChanged(this.service.todos)}(new r,new i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q25CLEVBQUs4RCxLQUFLeEIsYUFBYXRDLElBR3pCLEtBQUErRCxjQUFnQixTQUFDQyxHQUNmLEVBQUtILFFBQVFsRCxRQUFRcUQsSUFHdkIsS0FBQUMsZUFBaUIsU0FBQ2hNLEVBQVkrTCxHQUM1QixFQUFLSCxRQUFRakQsU0FBUzNJLEVBQUkrTCxJQUc1QixLQUFBRSxpQkFBbUIsU0FBQ2pNLEdBQ2xCLEVBQUs0TCxRQUFRL0MsV0FBVzdJLElBRzFCLEtBQUFrTSxpQkFBbUIsU0FBQ2xNLEdBQ2xCLEVBQUs0TCxRQUFRN0MsV0FBVy9JLElBL0J4QkssS0FBS3VMLFFBQVVBLEVBQ2Z2TCxLQUFLd0wsS0FBT0EsRUFHWnhMLEtBQUt1TCxRQUFRdkQsb0JBQW9CaEksS0FBS2tJLG1CQUN0Q2xJLEtBQUt3TCxLQUFLVCxZQUFZL0ssS0FBS3lMLGVBQzNCekwsS0FBS3dMLEtBQUtILGFBQWFyTCxLQUFLMkwsZ0JBQzVCM0wsS0FBS3dMLEtBQUtMLGVBQWVuTCxLQUFLNEwsa0JBQzlCNUwsS0FBS3dMLEtBQUtGLGVBQWV0TCxLQUFLNkwsa0JBRzlCN0wsS0FBS2tJLGtCQUFrQmxJLEtBQUt1TCxRQUFRN0QsT0RqQjVCLENBQW1CLElBQUlvRSxFQUFlLElBQUlDLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvbW9kZWxzL3RvZG8ubW9kZWwudHMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL3NlcnZpY2VzL3RvZG8uc2VydmljZS50cyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvdmlld3MvdG9kby52aWV3cyAudHMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3dlYnBhY2stZGVtby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJwYWNrLWRlbW8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VicGFjay1kZW1vLy4vc3JjL2NvbnRyb2xsZXJzL3RvZG8uY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNsYXNzIFRvZG9EVE8ge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIGNvbXBsZXRlOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0ZXh0OiBzdHJpbmcsIGNvbXBsZXRlOiBib29sZWFuID0gZmFsc2UgKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gdXVpZHY0KCkge1xyXG4gICAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XHJcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xyXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pZCA9IHV1aWR2NCgpO1xyXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICAgIHRoaXMuY29tcGxldGUgPSBjb21wbGV0ZTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVG9kb0NoaWxkIGV4dGVuZHMgVG9kb0RUTyB7XHJcbiAgZmlsdGVyKGFyZzA6IChpZDogc3RyaW5nKSA9PiBib29sZWFuKTogVG9kb0NoaWxkIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gIH1cclxuICBtYXAoYXJnMDogKHRvZG86IFRvZG9EVE8pID0+IFRvZG9EVE8pOiBUb2RvQ2hpbGQge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgfVxyXG4gIHB1c2goYXJnMDogVG9kb0RUTykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgfVxyXG4gIGNoaWxkcmVuOiBUb2RvRFRPW107XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFRvZG9DaGlsZCwgVG9kb0RUTyB9IGZyb20gXCIuLi9tb2RlbHMvdG9kby5tb2RlbFwiO1xuXG4vKipcbiAqIEBjbGFzcyBTZXJ2aWNlXG4gKlxuICogTWFuYWdlcyB0aGUgZGF0YSBvZiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbiBleHBvcnQgY2xhc3MgVG9kb1NlcnZpY2Uge1xuICB0b2RvczogVG9kb0RUT1tdO1xuICBvblRvZG9MaXN0Q2hhbmdlZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudG9kb3MgPSAoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvZG9zXCIpKSB8fCBbXSkubWFwKFxuICAgICAgKHRvZG86IGFueSkgPT4gbmV3IFRvZG9EVE8odG9kbylcbiAgICApO1xuICB9XG5cbiAgYmluZFRvZG9MaXN0Q2hhbmdlZChjYWxsYmFjazphbnkpIHtcbiAgICB0aGlzLm9uVG9kb0xpc3RDaGFuZ2VkID0gY2FsbGJhY2s7XG4gIH1cblxuICBfY29tbWl0KHRvZG9zOmFueSkge1xuICAgIHRoaXMub25Ub2RvTGlzdENoYW5nZWQodG9kb3MpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidG9kb3NcIiwgSlNPTi5zdHJpbmdpZnkodG9kb3MpKTtcbiAgfVxuXG4gIGFkZFRvZG8odGV4dDpzdHJpbmcpIHtcbiAgICB0aGlzLnRvZG9zLnB1c2gobmV3IFRvZG9EVE8odGV4dCkpO1xuXG4gICAgdGhpcy5fY29tbWl0KHRoaXMudG9kb3MpO1xuICB9XG5cbiAgZWRpdFRvZG8oaWQ6c3RyaW5nLCB1cGRhdGVkVGV4dDpzdHJpbmcpIHtcbiAgICB0aGlzLnRvZG9zID0gdGhpcy50b2Rvcy5tYXAoKHRvZG86IGFueSkgPT5cbiAgICAgIHRvZG8uaWQgPT09IGlkXG4gICAgICAgID8gbmV3IFRvZG9EVE8oe1xuICAgICAgICAgICAgLi4udG9kbyxcbiAgICAgICAgICAgIHRleHQ6IHVwZGF0ZWRUZXh0XG4gICAgICAgICAgfSlcbiAgICAgICAgOiB0b2RvXG4gICAgKTtcblxuICAgIHRoaXMuX2NvbW1pdCh0aGlzLnRvZG9zKTtcbiAgfVxuXG4gIGRlbGV0ZVRvZG8oX2lkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRvZG9zID0gdGhpcy50b2Rvcy5maWx0ZXIoKHsgaWQgfSkgID0+IGlkICE9PSBfaWQpO1xuXG4gICAgdGhpcy5fY29tbWl0KHRoaXMudG9kb3MpO1xuICB9XG5cbiAgdG9nZ2xlVG9kbyhfaWQ6IHN0cmluZykge1xuICAgIHRoaXMudG9kb3MgPSB0aGlzLnRvZG9zLm1hcCgodG9kbzogYW55KSA9PlxuICAgICAgdG9kby5pZCA9PT0gX2lkID8gbmV3IFRvZG9EVE8oeyAuLi50b2RvLCBjb21wbGV0ZTogIXRvZG8uY29tcGxldGUgfSkgOiB0b2RvXG4gICAgKTtcblxuICAgIHRoaXMuX2NvbW1pdCh0aGlzLnRvZG9zKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAY2xhc3MgVmlld1xuICpcbiAqIFZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwuXG4gKi9cbiBleHBvcnQgY2xhc3MgVG9kb1ZpZXcge1xuICBhcHA6IGFueTtcbiAgZm9ybTogYW55O1xuICBpbnB1dDogYW55O1xuICBzdWJtaXRCdXR0b246IGFueTtcbiAgdGl0bGU6IGFueTtcbiAgdG9kb0xpc3Q6IGFueTtcbiAgX3RlbXBvcmFyeVRvZG9UZXh0OiBzdHJpbmc7XG5cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFwcCA9IHRoaXMuZ2V0RWxlbWVudChcIiNyb290XCIpO1xuICAgIHRoaXMuZm9ybSA9IHRoaXMuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgdGhpcy5pbnB1dCA9IHRoaXMuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHRoaXMuaW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgIHRoaXMuaW5wdXQucGxhY2Vob2xkZXIgPSBcIkFkZCB0b2RvXCI7XG4gICAgdGhpcy5pbnB1dC5uYW1lID0gXCJ0b2RvXCI7XG4gICAgdGhpcy5zdWJtaXRCdXR0b24gPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgdGhpcy5zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlN1Ym1pdFwiO1xuICAgIHRoaXMuZm9ybS5hcHBlbmQodGhpcy5pbnB1dCwgdGhpcy5zdWJtaXRCdXR0b24pO1xuICAgIHRoaXMudGl0bGUgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICB0aGlzLnRpdGxlLnRleHRDb250ZW50ID0gXCJUb2Rvc1wiO1xuICAgIHRoaXMudG9kb0xpc3QgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCBcInRvZG8tbGlzdFwiKTtcbiAgICB0aGlzLmFwcC5hcHBlbmQodGhpcy50aXRsZSwgdGhpcy5mb3JtLCB0aGlzLnRvZG9MaXN0KTtcblxuICAgIHRoaXMuX3RlbXBvcmFyeVRvZG9UZXh0ID0gXCJcIjtcbiAgICB0aGlzLl9pbml0TG9jYWxMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGdldCBfdG9kb1RleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsdWU7XG4gIH1cblxuICBfcmVzZXRJbnB1dCgpIHtcbiAgICB0aGlzLmlucHV0LnZhbHVlID0gXCJcIjtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQodGFnOiBhbnksIGNsYXNzTmFtZT86YW55KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcblxuICAgIGlmIChjbGFzc05hbWUpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBnZXRFbGVtZW50KHNlbGVjdG9yOiBhbnkpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIGRpc3BsYXlUb2Rvcyh0b2RvczogYW55KSB7XG4gICAgLy8gRGVsZXRlIGFsbCBub2Rlc1xuICAgIHdoaWxlICh0aGlzLnRvZG9MaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRoaXMudG9kb0xpc3QucmVtb3ZlQ2hpbGQodGhpcy50b2RvTGlzdC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICAvLyBTaG93IGRlZmF1bHQgbWVzc2FnZVxuICAgIGlmICh0b2Rvcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IHAgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgcC50ZXh0Q29udGVudCA9IFwiTm90aGluZyB0byBkbyEgQWRkIGEgdGFzaz9cIjtcbiAgICAgIHRoaXMudG9kb0xpc3QuYXBwZW5kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgbm9kZXNcbiAgICAgIHRvZG9zLmZvckVhY2goKHRvZG86IHsgaWQ6IGFueTsgY29tcGxldGU6IGFueTsgdGV4dDogYW55OyB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGxpID0gdGhpcy5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGxpLmlkID0gdG9kby5pZDtcblxuICAgICAgICBjb25zdCBjaGVja2JveCA9IHRoaXMuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBjaGVja2JveC50eXBlID0gXCJjaGVja2JveFwiO1xuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdG9kby5jb21wbGV0ZTtcblxuICAgICAgICBjb25zdCBzcGFuID0gdGhpcy5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgc3Bhbi5jb250ZW50RWRpdGFibGUgPSB0cnVlO1xuICAgICAgICBzcGFuLmNsYXNzTGlzdC5hZGQoXCJlZGl0YWJsZVwiKTtcblxuICAgICAgICBpZiAodG9kby5jb21wbGV0ZSkge1xuICAgICAgICAgIGNvbnN0IHN0cmlrZSA9IHRoaXMuY3JlYXRlRWxlbWVudChcInNcIik7XG4gICAgICAgICAgc3RyaWtlLnRleHRDb250ZW50ID0gdG9kby50ZXh0O1xuICAgICAgICAgIHNwYW4uYXBwZW5kKHN0cmlrZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHRvZG8udGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IHRoaXMuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBcImRlbGV0ZVwiKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gXCJEZWxldGVcIjtcbiAgICAgICAgbGkuYXBwZW5kKGNoZWNrYm94LCBzcGFuLCBkZWxldGVCdXR0b24pO1xuXG4gICAgICAgIC8vIEFwcGVuZCBub2Rlc1xuICAgICAgICB0aGlzLnRvZG9MaXN0LmFwcGVuZChsaSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBEZWJ1Z2dpbmdcbiAgICBjb25zb2xlLmxvZyh0b2Rvcyk7XG4gIH1cblxuICBfaW5pdExvY2FsTGlzdGVuZXJzKCkge1xuICAgIHRoaXMudG9kb0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChldmVudDogeyB0YXJnZXQ6IHsgY2xhc3NOYW1lOiBzdHJpbmc7IGlubmVyVGV4dDogc3RyaW5nOyB9OyB9KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTmFtZSA9PT0gXCJlZGl0YWJsZVwiKSB7XG4gICAgICAgIHRoaXMuX3RlbXBvcmFyeVRvZG9UZXh0ID0gZXZlbnQudGFyZ2V0LmlubmVyVGV4dDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGJpbmRBZGRUb2RvKGhhbmRsZXI6IChhcmcwOiBhbnkpID0+IHZvaWQpIHtcbiAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQ6IHsgcHJldmVudERlZmF1bHQ6ICgpID0+IHZvaWQ7IH0pID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh0aGlzLl90b2RvVGV4dCkge1xuICAgICAgICBoYW5kbGVyKHRoaXMuX3RvZG9UZXh0KTtcbiAgICAgICAgdGhpcy5fcmVzZXRJbnB1dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYmluZERlbGV0ZVRvZG8oaGFuZGxlcjogKGFyZzA6IGFueSkgPT4gdm9pZCkge1xuICAgIHRoaXMudG9kb0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudDogeyB0YXJnZXQ6IHsgY2xhc3NOYW1lOiBzdHJpbmc7IHBhcmVudEVsZW1lbnQ6IHsgaWQ6IGFueTsgfTsgfTsgfSkgPT4ge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc05hbWUgPT09IFwiZGVsZXRlXCIpIHtcbiAgICAgICAgY29uc3QgaWQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5pZDtcblxuICAgICAgICBoYW5kbGVyKGlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGJpbmRFZGl0VG9kbyhoYW5kbGVyOiAoYXJnMDogYW55LCBhcmcxOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICB0aGlzLnRvZG9MaXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCAoZXZlbnQ6IHsgdGFyZ2V0OiB7IHBhcmVudEVsZW1lbnQ6IHsgaWQ6IGFueTsgfTsgfTsgfSkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3RlbXBvcmFyeVRvZG9UZXh0KSB7XG4gICAgICAgIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuaWQ7XG5cbiAgICAgICAgaGFuZGxlcihpZCwgdGhpcy5fdGVtcG9yYXJ5VG9kb1RleHQpO1xuICAgICAgICB0aGlzLl90ZW1wb3JhcnlUb2RvVGV4dCA9IFwiXCI7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBiaW5kVG9nZ2xlVG9kbyhoYW5kbGVyOiAoYXJnMDogYW55KSA9PiB2b2lkKSB7XG4gICAgdGhpcy50b2RvTGlzdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudDogeyB0YXJnZXQ6IHsgdHlwZTogc3RyaW5nOyBwYXJlbnRFbGVtZW50OiB7IGlkOiBhbnk7IH07IH07IH0pID0+IHtcbiAgICAgIGlmIChldmVudC50YXJnZXQudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgICAgIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuaWQ7XG5cbiAgICAgICAgaGFuZGxlcihpZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKixcXG4qOjpiZWZvcmUsXFxuKjo6YWZ0ZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveFxcbn1cXG5cXG5odG1sIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgY29sb3I6ICM0NDQ7XFxufVxcblxcbiNyb290IHtcXG4gIG1heC13aWR0aDogNDUwcHg7XFxuICBtYXJnaW46IDJyZW0gYXV0bztcXG4gIHBhZGRpbmc6IDAgMXJlbTtcXG59XFxuXFxuZm9ybSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG59XFxuXFxuW3R5cGU9XFxcInRleHRcXFwiXSxcXG5idXR0b24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgcGFkZGluZzogLjVyZW0gMXJlbTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNjY2M7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblxcbmJ1dHRvbiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kOiAjMDA3YmZmO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyOiAycHggc29saWQgIzAwN2JmZjtcXG4gIG1hcmdpbjogMCAuNXJlbTtcXG59XFxuXFxuW3R5cGU9XFxcInRleHRcXFwiXSB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuW3R5cGU9XFxcInRleHRcXFwiXTphY3RpdmUsXFxuW3R5cGU9XFxcInRleHRcXFwiXTpmb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbiAgYm9yZGVyOiAycHggc29saWQgIzAwN2JmZjtcXG59XFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbn1cXG5cXG5oMSB7XFxuICBjb2xvcjogIzIyMjtcXG59XFxuXFxudWwge1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxubGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGJhY2tncm91bmQ6ICNmNGY0ZjQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblxcbmxpIHNwYW4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZzogLjVyZW07XFxuICB3aWR0aDogMjUwcHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxubGkgc3Bhbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE3OSwgMjE1LCAyNTUsIDAuNTIpO1xcbn1cXG5cXG5saSBzcGFuOmZvY3VzIHtcXG4gIG91dGxpbmU6IDA7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNzksIDIwNywgMjU1LCAwLjUyKVxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7RUFHRTtBQUNGOztBQUVBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGVBQWU7RUFDZixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCOztBQUVBOztFQUVFLHFCQUFxQjtFQUNyQix3QkFBd0I7RUFDeEIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixzQkFBc0I7RUFDdEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1oseUJBQXlCO0VBQ3pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7O0VBRUUsVUFBVTtFQUNWLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsY0FBYztFQUNkLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UscUNBQXFDO0FBQ3ZDOztBQUVBO0VBQ0UsVUFBVTtFQUNWLHlCQUF5QjtFQUN6QjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3hcXG59XFxuXFxuaHRtbCB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGNvbG9yOiAjNDQ0O1xcbn1cXG5cXG4jcm9vdCB7XFxuICBtYXgtd2lkdGg6IDQ1MHB4O1xcbiAgbWFyZ2luOiAycmVtIGF1dG87XFxuICBwYWRkaW5nOiAwIDFyZW07XFxufVxcblxcbmZvcm0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XFxufVxcblxcblt0eXBlPVxcXCJ0ZXh0XFxcIl0sXFxuYnV0dG9uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIHBhZGRpbmc6IC41cmVtIDFyZW07XFxuICBmb250LXNpemU6IDFyZW07XFxuICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG5idXR0b24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZDogIzAwN2JmZjtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICMwMDdiZmY7XFxuICBtYXJnaW46IDAgLjVyZW07XFxufVxcblxcblt0eXBlPVxcXCJ0ZXh0XFxcIl0ge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcblt0eXBlPVxcXCJ0ZXh0XFxcIl06YWN0aXZlLFxcblt0eXBlPVxcXCJ0ZXh0XFxcIl06Zm9jdXMge1xcbiAgb3V0bGluZTogMDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICMwMDdiZmY7XFxufVxcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdIHtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG59XFxuXFxuaDEge1xcbiAgY29sb3I6ICMyMjI7XFxufVxcblxcbnVsIHtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmxpIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBiYWNrZ3JvdW5kOiAjZjRmNGY0O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG5saSBzcGFuIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IC41cmVtO1xcbiAgd2lkdGg6IDI1MHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcblxcbmxpIHNwYW46aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNzksIDIxNSwgMjU1LCAwLjUyKTtcXG59XFxuXFxubGkgc3Bhbjpmb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbiAgYm9yZGVyOiAycHggc29saWQgIzAwN2JmZjtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMTc5LCAyMDcsIDI1NSwgMC41MilcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBUb2RvQ29udHJvbGxlciB9IGZyb20gXCIuL2NvbnRyb2xsZXJzL3RvZG8uY29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBUb2RvU2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL3RvZG8uc2VydmljZVwiO1xyXG5pbXBvcnQgeyBUb2RvVmlldyB9IGZyb20gXCIuL3ZpZXdzL3RvZG8udmlld3MgXCI7XHJcbmltcG9ydCAnLi9zdHlsZS5jc3MnXHJcblxyXG5cclxuY29uc3QgYXBwID0gbmV3IFRvZG9Db250cm9sbGVyKG5ldyBUb2RvU2VydmljZSgpLCBuZXcgVG9kb1ZpZXcoKSk7IiwiLyoqXG4gKiBAY2xhc3MgQ29udHJvbGxlclxuICpcbiAqIExpbmtzIHRoZSB1c2VyIGlucHV0IGFuZCB0aGUgdmlldyBvdXRwdXQuXG4gKlxuICogQHBhcmFtIG1vZGVsXG4gKiBAcGFyYW0gdmlld1xuICovXG4gZXhwb3J0IGNsYXNzIFRvZG9Db250cm9sbGVyIHtcbiAgc2VydmljZTogYW55O1xuICB2aWV3OiBhbnk7XG5cbiAgY29uc3RydWN0b3Ioc2VydmljZTogYW55LCB2aWV3OiBhbnkpIHtcbiAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIHRoaXMudmlldyA9IHZpZXc7XG5cbiAgICAvLyBFeHBsaWNpdCB0aGlzIGJpbmRpbmdcbiAgICB0aGlzLnNlcnZpY2UuYmluZFRvZG9MaXN0Q2hhbmdlZCh0aGlzLm9uVG9kb0xpc3RDaGFuZ2VkKTtcbiAgICB0aGlzLnZpZXcuYmluZEFkZFRvZG8odGhpcy5oYW5kbGVBZGRUb2RvKTtcbiAgICB0aGlzLnZpZXcuYmluZEVkaXRUb2RvKHRoaXMuaGFuZGxlRWRpdFRvZG8pO1xuICAgIHRoaXMudmlldy5iaW5kRGVsZXRlVG9kbyh0aGlzLmhhbmRsZURlbGV0ZVRvZG8pO1xuICAgIHRoaXMudmlldy5iaW5kVG9nZ2xlVG9kbyh0aGlzLmhhbmRsZVRvZ2dsZVRvZG8pO1xuXG4gICAgLy8gRGlzcGxheSBpbml0aWFsIHRvZG9zXG4gICAgdGhpcy5vblRvZG9MaXN0Q2hhbmdlZCh0aGlzLnNlcnZpY2UudG9kb3MpO1xuICB9XG5cbiAgb25Ub2RvTGlzdENoYW5nZWQgPSAodG9kb3M6IGFueSkgPT4ge1xuICAgIHRoaXMudmlldy5kaXNwbGF5VG9kb3ModG9kb3MpO1xuICB9O1xuXG4gIGhhbmRsZUFkZFRvZG8gPSAodG9kb1RleHQ6IGFueSkgPT4ge1xuICAgIHRoaXMuc2VydmljZS5hZGRUb2RvKHRvZG9UZXh0KTtcbiAgfTtcblxuICBoYW5kbGVFZGl0VG9kbyA9IChpZDogc3RyaW5nLCB0b2RvVGV4dDogYW55KSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmVkaXRUb2RvKGlkLCB0b2RvVGV4dCk7XG4gIH07XG5cbiAgaGFuZGxlRGVsZXRlVG9kbyA9IChpZDogc3RyaW5nKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZVRvZG8oaWQpO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVRvZG8gPSAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHRoaXMuc2VydmljZS50b2dnbGVUb2RvKGlkKTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJvcHRpb25zIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZmlsdGVyIiwiYXJnMCIsInRleHQiLCJjb21wbGV0ZSIsInJlcGxhY2UiLCJjIiwiciIsIk1hdGgiLCJyYW5kb20iLCJ0b2RvcyIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInRvZG8iLCJUb2RvRFRPIiwiYmluZFRvZG9MaXN0Q2hhbmdlZCIsImNhbGxiYWNrIiwib25Ub2RvTGlzdENoYW5nZWQiLCJfY29tbWl0Iiwic2V0SXRlbSIsImFkZFRvZG8iLCJlZGl0VG9kbyIsInVwZGF0ZWRUZXh0IiwiZGVsZXRlVG9kbyIsIl9pZCIsInRvZ2dsZVRvZG8iLCJhcHAiLCJnZXRFbGVtZW50IiwiZm9ybSIsImlucHV0IiwidHlwZSIsInBsYWNlaG9sZGVyIiwibmFtZSIsInN1Ym1pdEJ1dHRvbiIsInRleHRDb250ZW50IiwiYXBwZW5kIiwidGl0bGUiLCJ0b2RvTGlzdCIsIl90ZW1wb3JhcnlUb2RvVGV4dCIsIl9pbml0TG9jYWxMaXN0ZW5lcnMiLCJ2YWx1ZSIsIl9yZXNldElucHV0IiwidGFnIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwic2VsZWN0b3IiLCJkaXNwbGF5VG9kb3MiLCJwIiwiZm9yRWFjaCIsImxpIiwiY2hlY2tib3giLCJjaGVja2VkIiwic3BhbiIsImNvbnRlbnRFZGl0YWJsZSIsInN0cmlrZSIsImRlbGV0ZUJ1dHRvbiIsImNvbnNvbGUiLCJsb2ciLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJpbm5lclRleHQiLCJiaW5kQWRkVG9kbyIsImhhbmRsZXIiLCJwcmV2ZW50RGVmYXVsdCIsIl90b2RvVGV4dCIsImJpbmREZWxldGVUb2RvIiwicGFyZW50RWxlbWVudCIsImJpbmRFZGl0VG9kbyIsImJpbmRUb2dnbGVUb2RvIiwic2VydmljZSIsInZpZXciLCJoYW5kbGVBZGRUb2RvIiwidG9kb1RleHQiLCJoYW5kbGVFZGl0VG9kbyIsImhhbmRsZURlbGV0ZVRvZG8iLCJoYW5kbGVUb2dnbGVUb2RvIiwiVG9kb1NlcnZpY2UiLCJUb2RvVmlldyJdLCJzb3VyY2VSb290IjoiIn0=